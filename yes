[1mdiff --git a/src/main/java/com/springboot/springboot/config/WebSecurityConfig.java b/src/main/java/com/springboot/springboot/config/WebSecurityConfig.java[m
[1mindex caa2468..f5fc042 100644[m
[1m--- a/src/main/java/com/springboot/springboot/config/WebSecurityConfig.java[m
[1m+++ b/src/main/java/com/springboot/springboot/config/WebSecurityConfig.java[m
[36m@@ -3,7 +3,6 @@[m [mpackage com.springboot.springboot.config;[m
 import org.springframework.beans.factory.annotation.Autowired;[m
 import org.springframework.context.annotation.Bean;[m
 import org.springframework.context.annotation.Configuration;[m
[31m-import org.springframework.context.annotation.Lazy;[m
 import org.springframework.security.authentication.AuthenticationManager;[m
 import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;[m
 import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;[m
[36m@@ -35,7 +34,7 @@[m [mpublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {[m
 		// configure AuthenticationManager so that it knows from where to load[m
 		// user for matching credentials[m
 		// Use BCryptPasswordEncoder[m
[31m-//		auth.userDetailsService(jwtUserDetailsService).passwordEncoder(passwordEncoder());[m
[32m+[m		[32mauth.userDetailsService(jwtUserDetailsService).passwordEncoder(passwordEncoder());[m
 	}[m
 [m
 	@Bean[m
[36m@@ -54,7 +53,7 @@[m [mpublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {[m
 		// We don't need CSRF for this example[m
 		httpSecurity.csrf().disable()[m
 				// dont authenticate this particular request[m
[31m-				.authorizeRequests().antMatchers("/authenticate").permitAll().[m
[32m+[m				[32m.authorizeRequests().antMatchers("/authenticate", "/register").permitAll().[m
 				// all other requests need to be authenticated[m
 				anyRequest().authenticated().and().[m
 				// make sure we use stateless session; session won't be used to[m
[1mdiff --git a/src/main/java/com/springboot/springboot/controller/JwtAuthenticationController.java b/src/main/java/com/springboot/springboot/controller/JwtAuthenticationController.java[m
[1mindex 7b52176..36a1885 100644[m
[1m--- a/src/main/java/com/springboot/springboot/controller/JwtAuthenticationController.java[m
[1m+++ b/src/main/java/com/springboot/springboot/controller/JwtAuthenticationController.java[m
[36m@@ -1,7 +1,5 @@[m
 package com.springboot.springboot.controller;[m
 [m
[31m-import java.util.Objects;[m
[31m-[m
 import org.springframework.beans.factory.annotation.Autowired;[m
 import org.springframework.http.ResponseEntity;[m
 import org.springframework.security.authentication.AuthenticationManager;[m
[36m@@ -9,7 +7,6 @@[m [mimport org.springframework.security.authentication.BadCredentialsException;[m
 import org.springframework.security.authentication.DisabledException;[m
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;[m
 import org.springframework.security.core.userdetails.UserDetails;[m
[31m-import org.springframework.security.core.userdetails.UserDetailsService;[m
 import org.springframework.web.bind.annotation.CrossOrigin;[m
 import org.springframework.web.bind.annotation.RequestBody;[m
 import org.springframework.web.bind.annotation.RequestMapping;[m
[36m@@ -19,9 +16,8 @@[m [mimport org.springframework.web.bind.annotation.RestController;[m
 import com.springboot.springboot.config.JwtTokenUtil;[m
 import com.springboot.springboot.model.JwtRequest;[m
 import com.springboot.springboot.model.JwtResponse;[m
[31m-[m
[31m-// Akash Gupta[m
[31m-// Akash Gupta[m
[32m+[m[32mimport com.springboot.springboot.model.UserDTO;[m
[32m+[m[32mimport com.springboot.springboot.services.JwtUserDetailsService;[m
 [m
 @RestController[m
 @CrossOrigin[m
[36m@@ -34,26 +30,26 @@[m [mpublic class JwtAuthenticationController {[m
 	private JwtTokenUtil jwtTokenUtil;[m
 [m
 	@Autowired[m
[31m-	private UserDetailsService jwtInMemoryUserDetailsService;[m
[32m+[m	[32mprivate JwtUserDetailsService userDetailsService;[m
 [m
 	@RequestMapping(value = "/authenticate", method = RequestMethod.POST)[m
[31m-	public ResponseEntity<?> createAuthenticationToken(@RequestBody JwtRequest authenticationRequest)[m
[31m-			throws Exception {[m
[32m+[m	[32mpublic ResponseEntity<?> createAuthenticationToken(@RequestBody JwtRequest authenticationRequest) throws Exception {[m
 [m
 		authenticate(authenticationRequest.getUsername(), authenticationRequest.getPassword());[m
 [m
[31m-		final UserDetails userDetails = jwtInMemoryUserDetailsService[m
[31m-				.loadUserByUsername(authenticationRequest.getUsername());[m
[32m+[m		[32mfinal UserDetails userDetails = userDetailsService.loadUserByUsername(authenticationRequest.getUsername());[m
 [m
 		final String token = jwtTokenUtil.generateToken(userDetails);[m
 [m
 		return ResponseEntity.ok(new JwtResponse(token));[m
 	}[m
 [m
[31m-	private void authenticate(String username, String password) throws Exception {[m
[31m-		Objects.requireNonNull(username);[m
[31m-		Objects.requireNonNull(password);[m
[32m+[m	[32m@RequestMapping(value = "/register", method = RequestMethod.POST)[m
[32m+[m	[32mpublic ResponseEntity<?> saveUser(@RequestBody UserDTO user) throws Exception {[m
[32m+[m		[32mreturn ResponseEntity.ok(userDetailsService.save(user));[m
[32m+[m	[32m}[m
 [m
[32m+[m	[32mprivate void authenticate(String username, String password) throws Exception {[m
 		try {[m
 			authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));[m
 		} catch (DisabledException e) {[m
[36m@@ -62,4 +58,4 @@[m [mpublic class JwtAuthenticationController {[m
 			throw new Exception("INVALID_CREDENTIALS", e);[m
 		}[m
 	}[m
[31m-}[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/com/springboot/springboot/services/JwtUserDetailsService.java b/src/main/java/com/springboot/springboot/services/JwtUserDetailsService.java[m
[1mindex 3bcd390..e253e05 100644[m
[1m--- a/src/main/java/com/springboot/springboot/services/JwtUserDetailsService.java[m
[1m+++ b/src/main/java/com/springboot/springboot/services/JwtUserDetailsService.java[m
[36m@@ -1,28 +1,54 @@[m
 package com.springboot.springboot.services;[m
 [m
 import java.util.ArrayList;[m
[31m-// Akash Gupta[m
[31m-// Akash Gupta[m
 [m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.context.annotation.Lazy;[m
 import org.springframework.security.core.userdetails.User;[m
 import org.springframework.security.core.userdetails.UserDetails;[m
 import org.springframework.security.core.userdetails.UserDetailsService;[m
 import org.springframework.security.core.userdetails.UsernameNotFoundException;[m
[32m+[m[32mimport org.springframework.security.crypto.password.PasswordEncoder;[m
 import org.springframework.stereotype.Service;[m
[31m-// Akash Gupta[m
[31m-// Akash Gupta[m
[32m+[m
[32m+[m[32mimport com.springboot.springboot.dao.UserDao;[m
[32m+[m[32mimport com.springboot.springboot.model.DAOUser;[m
[32m+[m[32mimport com.springboot.springboot.model.UserDTO;[m
 [m
 @Service[m
 public class JwtUserDetailsService implements UserDetailsService {[m
 [m
[32m+[m	[32m@Autowired[m
[32m+[m	[32mprivate UserDao userDao;[m
[32m+[m
[32m+[m	[32m@Autowired[m
[32m+[m	[32mprivate PasswordEncoder bcryptEncoder;[m
[32m+[m
[32m+[m[32m//	@Override[m
[32m+[m[32m//	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {[m
[32m+[m[32m//		if ("javainuse".equals(username)) {[m
[32m+[m[32m//			return new User("javainuse", "$2a$10$slYQmyNdGzTn7ZLBXBChFOC9f6kFjAqPhccnP6DxlWXx2lPk1C3G6",[m
[32m+[m[32m//					new ArrayList<>());[m
[32m+[m[32m//		} else {[m
[32m+[m[32m//			throw new UsernameNotFoundException("User not found with username: " + username);[m
[32m+[m[32m//		}[m
[32m+[m[32m//	}[m
 	@Override[m
 	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {[m
[31m-		if ("javainuse".equals(username)) {[m
[31m-			return new User("javainuse", "$2a$10$slYQmyNdGzTn7ZLBXBChFOC9f6kFjAqPhccnP6DxlWXx2lPk1C3G6",[m
[31m-					new ArrayList<>());[m
[31m-		} else {[m
[32m+[m
[32m+[m		[32mDAOUser user = userDao.findByUsername(username);[m
[32m+[m		[32mif (user == null) {[m
 			throw new UsernameNotFoundException("User not found with username: " + username);[m
 		}[m
[32m+[m		[32mreturn new org.springframework.security.core.userdetails.User(user.getUsername(), user.getPassword(),[m
[32m+[m				[32mnew ArrayList<>());[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mpublic DAOUser save(UserDTO user) {[m
[32m+[m		[32mDAOUser newUser = new DAOUser();[m
[32m+[m		[32mnewUser.setUsername(user.getUsername());[m
[32m+[m		[32mnewUser.setPassword(bcryptEncoder.encode(user.getPassword()));[m
[32m+[m		[32mreturn  userDao.save(newUser);[m
 	}[m
 [m
 }[m
\ No newline at end of file[m
[1mdiff --git a/src/main/resources/application.properties b/src/main/resources/application.properties[m
[1mindex 1a8bf8d..45edaa4 100644[m
[1m--- a/src/main/resources/application.properties[m
[1m+++ b/src/main/resources/application.properties[m
[36m@@ -7,8 +7,10 @@[m [mspring.datasource.username=root[m
 spring.datasource.password=1250[m
 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver[m
 spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect[m
[31m-spring.jpa.hibernate.ddl-auto=update[m
[32m+[m[32mspring.datasource.platform=mysql[m
[32m+[m[32mspring.jpa.hibernate.ddl-auto=create-drop[m
 spring.jpa.show-sql=true[m
[32m+[m[32mspring.main.allow-circular-references=true[m
 #Rest of these should be the same if any problem occurs check your libraries version[m
 #also check your maven libraries version[m
 [m
